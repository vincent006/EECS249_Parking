// Generated by gencpp from file romi_interface/follow_pathResult.msg
// DO NOT EDIT!


#ifndef ROMI_INTERFACE_MESSAGE_FOLLOW_PATHRESULT_H
#define ROMI_INTERFACE_MESSAGE_FOLLOW_PATHRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace romi_interface
{
template <class ContainerAllocator>
struct follow_pathResult_
{
  typedef follow_pathResult_<ContainerAllocator> Type;

  follow_pathResult_()
    : is_goal(false)  {
    }
  follow_pathResult_(const ContainerAllocator& _alloc)
    : is_goal(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_goal_type;
  _is_goal_type is_goal;





  typedef boost::shared_ptr< ::romi_interface::follow_pathResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::romi_interface::follow_pathResult_<ContainerAllocator> const> ConstPtr;

}; // struct follow_pathResult_

typedef ::romi_interface::follow_pathResult_<std::allocator<void> > follow_pathResult;

typedef boost::shared_ptr< ::romi_interface::follow_pathResult > follow_pathResultPtr;
typedef boost::shared_ptr< ::romi_interface::follow_pathResult const> follow_pathResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::romi_interface::follow_pathResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::romi_interface::follow_pathResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::romi_interface::follow_pathResult_<ContainerAllocator1> & lhs, const ::romi_interface::follow_pathResult_<ContainerAllocator2> & rhs)
{
  return lhs.is_goal == rhs.is_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::romi_interface::follow_pathResult_<ContainerAllocator1> & lhs, const ::romi_interface::follow_pathResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace romi_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::romi_interface::follow_pathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::romi_interface::follow_pathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::romi_interface::follow_pathResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::romi_interface::follow_pathResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::romi_interface::follow_pathResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::romi_interface::follow_pathResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::romi_interface::follow_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42057c1ec965897941ec1232a3d488c4";
  }

  static const char* value(const ::romi_interface::follow_pathResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42057c1ec9658979ULL;
  static const uint64_t static_value2 = 0x41ec1232a3d488c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::romi_interface::follow_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "romi_interface/follow_pathResult";
  }

  static const char* value(const ::romi_interface::follow_pathResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::romi_interface::follow_pathResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"bool is_goal\n"
;
  }

  static const char* value(const ::romi_interface::follow_pathResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::romi_interface::follow_pathResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct follow_pathResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::romi_interface::follow_pathResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::romi_interface::follow_pathResult_<ContainerAllocator>& v)
  {
    s << indent << "is_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROMI_INTERFACE_MESSAGE_FOLLOW_PATHRESULT_H
